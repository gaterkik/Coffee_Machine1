type: edu
custom_name: stage6
files:
- name: machine/coffee_machine.py
  visible: true
  text: |+
    content = {
        'money': 550,
        'water': 400,
        'milk': 540,
        'beans': 120,
        'cups': 9
    }
    espresso = {
        'money': 4,
        'water': -250,
        'milk': 0,
        'beans': -16,
        'cups': -1
    }
    latte = {
        'money': 7,
        'water': -350,
        'milk': -75,
        'beans': -20,
        'cups': -1
    }
    cappuccino = {
        'money': 6,
        'water': -200,
        'milk': -100,
        'beans': -12,
        'cups': -1
    }

    price = [0, espresso, latte, cappuccino]

    def conversion(dic):
        for item in dic:
            content[item] += dic[item]


    def enough(dic):
        for item in dic:
            if dic[item] + content[item] < 0:
                return False
        return True


    def diagnostics(dic):
        stock = []
        for item in dic:
            if dic[item] + content[item] < 0:
                stock.append(item)
        print(f'Sorry, not enough {", ".join(stock)}!')


    def print_status():
        print()
        print('The coffee machine has:')
        print(f'{content["water"]} of water')
        print(f'{content["milk"]} of milk')
        print(f'{content["beans"]} of coffee beans')
        print(f'{content["cups"]} of disposable cups')
        print(f'{content["money"]} of money')
        print()


    while True:
        change_dic = dict()
        print('Write action (buy, fill,  take, remaining, exit):')
        action = input('> ')

        if action == 'fill':
            print('Write how many ml of water do you want to add:')
            change_dic['water'] = int(input('> '))
            print('Write how many ml of milk do you want to add:')
            change_dic['milk'] = int(input('> '))
            print('Write how many grams of coffee beans do you want to add:')
            change_dic['beans'] = int(input('> '))
            print('Write how many disposable cups of coffee do you want to add:')
            change_dic['cups'] = int(input('> '))

        elif action == 'buy':
            print('What do toy want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu:')
            choice = input('> ')
            if choice == 'back':
                continue
            else:
                choice = int(choice)
            if enough(price[choice]):
                print('I have enough resources, making you a coffee!')
                print()
                change_dic = price[choice]
            else:
                diagnostics(price[choice])

        elif action == 'take':
            print(f'I gave you ${content["money"]}')
            change_dic['money'] = - content["money"]

        elif action == 'remaining':
            print_status()

        elif action == 'exit':
            break

        conversion(change_dic)


  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)

    test1_input = '''remaining
    buy
    2
    buy
    2
    fill
    1000
    0
    0
    0
    buy
    2
    take
    remaining
    exit
    '''

    test2_input = '''remaining
    fill
    3000
    3000
    3000
    3000
    remaining
    exit
    '''

    test3_input = '''remaining
    buy
    1
    remaining
    exit
    '''

    test4_input = '''remaining
    buy
    2
    remaining
    exit
    '''

    test5_input = '''remaining
    buy
    3
    remaining
    exit
    '''

    test6_input = '''remaining
    take
    remaining
    exit
    '''

    test7_input = '''remaining
    buy
    back
    remaining
    exit
    '''


    class CoffeeMachineTest(StageTest):
        def generate(self) -> List[TestCase]:
            return TestCase.from_stepik(
                [
                    (
                        test1_input,
                        (
                            700 - 400,
                            390 - 540,
                            80 - 120,
                            7 - 9,
                            0 - 550,
                            "This test is exactly like in the example "
                            "- try to run it by yourself"
                        )
                    ),

                    (
                        test2_input,
                        (
                            3000,
                            3000,
                            3000,
                            3000,
                            0,
                            "This test checks \"fill\" action"
                        )
                    ),

                    (
                        test3_input,
                        (
                            -250,
                            0,
                            -16,
                            -1,
                            4,
                            "This test checks \"buy\" " +
                            "action with the first variant of coffee"
                        )
                    ),

                    (
                        test4_input,
                        (
                            -350,
                            -75,
                            -20,
                            -1,
                            7,
                            "This test checks \"buy\" " +
                            "action with the second variant of coffee"
                        )
                    ),

                    (
                        test5_input,
                        (
                            -200,
                            -100,
                            -12,
                            -1,
                            6,
                            "This test checks \"buy\" " +
                            "action with the third variant of coffee"
                        )
                    ),
                    (
                        test6_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            -550,
                            "This test checks \"take\" action"
                        )
                    ),

                    (
                        test7_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            0,
                            "This test checks \"back\" " +
                            "action right after \"buy\" action"
                        )
                    ),
                ]
            )

        def check(self, reply: str, clue: Any) -> CheckResult:
            if len(reply.splitlines()) <= 1:
                return CheckResult.wrong('Too few lines in output')

            water_, milk_, beans_, cups_, money_, feedback = clue

            milk = []
            water = []
            beans = []
            cups = []
            money = []

            for line in reply.splitlines():
                line = line.replace('$', '').strip()
                if len(line.split()) == 0:
                    continue
                first_word = line.split()[0]
                if not first_word.isdigit():
                    continue
                amount = int(first_word)
                if 'milk' in line:
                    milk += amount,
                elif 'water' in line:
                    water += amount,
                elif 'beans' in line:
                    beans += amount,
                elif 'cups' in line:
                    cups += amount,
                elif 'money' in line or 'cash' in line:
                    money += amount,

            if len(milk) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"milk\", " +
                    f"found: {len(milk)}"
                )

            if len(water) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"water\", " +
                    f"found: {len(water)}"
                )

            if len(beans) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"beans\", " +
                    f"found: {len(beans)}"
                )

            if len(cups) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"cups\", " +
                    f"found: {len(cups)}"
                )

            if len(money) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"money\", " +
                    f"found: {len(money)}"
                )

            milk = milk[0], milk[-1]
            water = water[0], water[-1]
            beans = beans[0], beans[-1]
            cups = cups[0], cups[-1]
            money = money[0], money[-1]

            diff = lambda item: item[1] - item[0]

            is_correct = (
                diff(water) == water_ and
                diff(milk) == milk_ and
                diff(beans) == beans_ and
                diff(cups) == cups_ and
                diff(money) == money_
            )
            return CheckResult(is_correct, feedback)


    if __name__ == '__main__':
        CoffeeMachineTest('machine.coffee_machine').run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/projects/68/stages/371/implement
status: Solved
record: 5
